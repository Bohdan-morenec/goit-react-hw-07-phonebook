{"version":3,"sources":["component/ContactList/ContactList.module.scss","App.module.scss","component/FormContact/FormContact.module.scss","component/ContactsFilter/ContactsFilter.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contact-selectors.js","component/FormContact/FormContact.js","redux/contacts/contact-operations.js","component/ContactsFilter/ContactsFilter.js","component/ContactList/ContactList.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","addContactRequest","createAction","addСontactSuccess","aadContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactRequest","fetchСontactSuccess","fetchContactError","filterContact","getContacts","state","contacts","items","getFilter","filter","logger","filteredArrayContact","createSelector","filterValue","toLowerCase","name","includes","FormContact","number","id","addFormContact","e","currentTarget","value","setState","dominicToretto","props","contactsItems","find","SubmitForm","preventDefault","alert","addСontact","uuidv4","className","styles","transparent","htmlFor","onSubmit","this","formInner","onChange","type","pattern","title","required","buttom","Component","Function","defaultProps","connect","dispatch","a","post","data","actions","filterContactState","lable","tupe","ContactList","componentDidMount","fetchContact","style","list","map","listItem","button","onClick","deleteContact","delete","get","box","preloader","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","itemsReducer","createReducer","_","payload","todo","loggerReducer","filterReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,8BAA8B,OAAS,4BAA4B,KAAO,0BAA0B,OAAS,8B,mBCA3KD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,UAAY,yB,mBCAhFD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,UAAY,+BAA+B,OAAS,8B,mBCArHD,EAAOC,QAAU,CAAC,MAAQ,gC,0PCE1BC,IAAMC,SAASC,QAAU,yBAElB,IAAMC,EAAoBC,YAAa,6BACjCC,EAAoBD,YAAa,kCACjCE,EAAkBF,YAAa,2BAE/BG,EAAuBH,YAClC,gCAEWI,EAAuBJ,YAClC,gCAEWK,EAAqBL,YAAa,8BAElCM,EAAsBN,YAAa,+BACnCO,EAAsBP,YAAa,oCACnCQ,EAAoBR,YAAa,6BAEjCS,EAAgBT,YAAa,iB,QCnB7BU,EAAc,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAExCC,EAAY,SAACH,GAAD,OAAWA,EAAMC,SAASG,QAEtCC,EAAS,SAACL,GAAD,OAAWA,EAAMC,SAASI,QAEnCC,EAAuBC,YAClC,CAACR,EAAaI,IACd,SAACF,EAAUG,GACT,IAAMI,EAAcJ,EAAOK,cAG3B,OAAOR,EAASG,QAAO,gBAAGM,EAAH,EAAGA,KAAH,OAAyBA,EAFZD,cAAcE,SAASH,S,OCJzDI,E,4MACJZ,MAAQ,CACNU,KAAM,GACNG,OAAQ,GACRC,GAAI,I,EAGNC,eAAiB,SAACC,GAChB,MAAwBA,EAAEC,cAAlBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MAEd,EAAKC,SAAL,eAAiBT,EAAOQ,K,EAG1BE,eAAiB,WACf,OAAO,EAAKC,MAAMC,cAAcC,MAAK,YAAuB,IAApBb,EAAmB,EAAnBA,KAAMG,EAAa,EAAbA,OAC5C,OAAOH,IAAS,EAAKV,MAAMU,MAAQG,IAAW,EAAKb,MAAMa,W,EAI7DW,WAAa,SAACR,GACZ,MAAyB,EAAKhB,MAAtBU,EAAR,EAAQA,KAAMG,EAAd,EAAcA,OAId,GAFAG,EAAES,iBAEE,EAAKL,iBACP,OAAOM,MAAM,gDAGf,EAAKL,MAAMM,gBAAW,CACpBjB,KAAMA,EACNG,OAAQA,EACRC,GAAIc,gBAGN,EAAKT,SAAS,CAAET,KAAM,GAAIG,OAAQ,GAAIC,GAAI,M,4CAG5C,WACE,OACE,sBACEe,UAAWC,IAAOC,YAClBC,QAASJ,cACTK,SAAUC,KAAKV,WAHjB,SAKE,sBAAKK,UAAWC,IAAOK,UAAvB,UACE,yCAEE,uBACEC,SAAUF,KAAKnB,eACfsB,KAAK,OACLnB,MAAOgB,KAAKlC,MAAMU,KAClBA,KAAK,OACL4B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEJ,SAAUF,KAAKnB,eACfsB,KAAK,MACLnB,MAAOgB,KAAKlC,MAAMa,OAClBH,KAAK,SACL4B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQX,UAAWC,IAAOW,OAAQJ,KAAK,SAAvC,kC,GArEgBK,aAuF1BC,SAASC,aAAe,CACtB3C,SAAU,IAGZ,I,IAQe4C,eARS,SAAC7C,GAAD,MAAY,CAClCsB,cAAevB,EAAYC,OAGF,SAAC8C,GAAD,MAAe,CACxCnB,kBAAY,SAACT,GAAD,OAAW4B,EC1FC,SAAC5B,GAAD,8CAAW,WAAO4B,GAAP,iBAAAC,EAAA,6DACnCD,EAAS1D,KAD0B,kBAIVH,IAAM+D,KAAK,SAAU9B,GAJX,gBAIzB+B,EAJyB,EAIzBA,KAERH,EAASxD,EAAkB2D,IANM,gDAQjCH,EAASvD,EAAgB,EAAD,KARS,yDAAX,sDD0FQ2D,CAAmBhC,QAGtC2B,CAA6CjC,G,iBE1E7CiC,eATS,SAAC7C,GAAD,MAAY,CAClCI,OAAQD,EAAUH,OAGO,SAAC8C,GAAD,MAAe,CACxCK,mBAAoB,SAACnC,GAAD,OAClB8B,EAASI,EAAsBlC,EAAEC,cAAcC,YAGpC2B,EA3BQ,SAAC,GAAoC,IAAlCM,EAAiC,EAAjCA,mBAAoB/C,EAAa,EAAbA,OAC5C,OACE,uBACEyB,UAAWC,IAAOsB,MAClBhB,SAAUe,EACVjC,MAAOd,EACPiD,KAAK,OACL3C,KAAK,SACL6B,MAAM,6F,iBCPNe,E,4MACJC,kBAAoB,WAClB,EAAKlC,MAAMmC,gB,4CAGb,WAAU,IAAD,OACP,OACE,oBAAI3B,UAAW4B,IAAMC,KAArB,SACGxB,KAAKb,MAAMf,qBAAqBqD,KAAI,gBAAGjD,EAAH,EAAGA,KAAMG,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAjB,OACnC,qBAAIe,UAAW4B,IAAMG,SAArB,UACE,oBAAG/B,UAAW4B,IAAM/C,KAApB,UACGA,EADH,KACU,sBAAMmB,UAAW4B,IAAM5C,OAAvB,SAAgCA,OAE1C,wBACEgB,UAAW4B,IAAMI,OACjBxB,KAAK,SACLyB,QAAS,kBAAM,EAAKzC,MAAM0C,cAAcjD,IAH1C,0DAJkCA,Y,GATpB4B,aAyCXG,eATS,SAAC7C,GAAD,MAAY,CAClCM,qBAAsBA,EAAqBN,OAGlB,SAAC8C,GAAD,MAAe,CACxCiB,cAAe,SAACjD,GAAD,OAAQgC,EFlBI,SAAChC,GAAD,8CAAQ,WAAOgC,GAAP,SAAAC,EAAA,6DACnCD,EAAStD,KAD0B,kBAI3BP,IAAM+E,OAAN,iBAAuBlD,IAJI,OAMjCgC,EAASrD,EAAqBqB,IANG,gDAQjCgC,EAASpD,EAAmB,EAAD,KARM,yDAAR,sDEkBKwD,CAAsBpC,KACtD0C,aAAc,kBAAMV,EFPM,uCAAM,WAAOA,GAAP,iBAAAC,EAAA,6DAChCD,EAASnD,GADuB,kBAIPV,IAAMgF,IAAI,UAJH,gBAItBhB,EAJsB,EAItBA,KAERH,EAASlD,EAAoBqD,IANC,gDAQ9BH,EAASjD,EAAkB,EAAD,KARI,yDAAN,2DEUbgD,CAA6CS,G,iBCrB7CT,eAJS,SAAC7C,GAAD,MAAY,CAClCK,OAAQA,EAAOL,MAGF6C,EAnBH,SAAC,GAAgB,IAAdxC,EAAa,EAAbA,OACb,OACE,sBAAKwB,UAAWC,IAAOoC,IAAvB,UACE,oBAAIrC,UAAWC,IAAOS,MAAtB,uBACA,cAAC,EAAD,IACA,gCACE,oBAAIV,UAAWC,IAAOS,MAAtB,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,IACClC,GAAU,oBAAIwB,UAAWC,IAAOqC,UAAtB,oECLJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuB1B,UACxC,6BAAqB2B,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,oCCQRO,GAAeC,YAAc,IAAD,mBAC/BjF,GAAsB,SAACkF,EAAD,YAAMC,WADG,cAE/BzF,GAAoB,SAACU,EAAD,OAAU+E,EAAV,EAAUA,QAAV,4BAA4B/E,GAA5B,CAAmC+E,OAFxB,cAG/BtF,GAAuB,SAACO,EAAD,OAAU+E,EAAV,EAAUA,QAAV,OACtB/E,EAAMI,QAAO,SAAC4E,GAAD,OAAUA,EAAKlE,KAAOiE,QAJL,IAO5BE,GAAgBJ,aAAc,GAAD,mBAChCzF,GAAoB,kBAAM,KADM,cAEhCE,GAAoB,kBAAM,KAFM,cAGhCC,GAAkB,kBAAM,KAHQ,cAIhCC,GAAuB,kBAAM,KAJG,cAKhCC,GAAuB,kBAAM,KALG,cAMhCC,GAAqB,kBAAM,KANK,cAOhCC,GAAsB,kBAAM,KAPI,cAQhCC,GAAsB,kBAAM,KARI,cAShCC,GAAoB,kBAAM,KATM,IAY7BqF,GAAgBL,YAAc,GAAD,eAChC/E,GAAgB,SAACgF,EAAD,YAAMC,YAGVI,gBAAgB,CAC7BjF,MAAO0E,GACPxE,OAAQ8E,GACR7E,OAAQ4E,K,QClBJG,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdxF,OAeayF,GAZDC,YAAe,CAC3BC,QAAS,CACP/F,SAAUgG,IAEZb,cACAc,UAAUC,IC5BZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SAEE,cAAC,EAAD,QAIJS,SAASC,eAAe,SAM1BpC,M","file":"static/js/main.063a67df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2n4w5\",\"listItem\":\"ContactList_listItem__1oxy2\",\"button\":\"ContactList_button__3pN51\",\"name\":\"ContactList_name__3GMTR\",\"number\":\"ContactList_number__gvnwF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__2llYb\",\"title\":\"App_title__2tIO1\",\"preloader\":\"App_preloader__3v7SJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transparent\":\"FormContact_transparent__1QuXK\",\"formInner\":\"FormContact_formInner__1cRPu\",\"buttom\":\"FormContact_buttom__2We0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lable\":\"ContactsFilter_lable__2Imt3\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \" http://localhost:3000\";\r\n\r\nexport const addContactRequest = createAction(\"contact/addContactRequest\");\r\nexport const addСontactSuccess = createAction(\"contact/addСontactSuccess\");\r\nexport const aadContactError = createAction(\"contact/aadContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contact/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contact/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contact/deleteContactError\");\r\n\r\nexport const fetchContactRequest = createAction(\"contact/fetchContactRequest\");\r\nexport const fetchСontactSuccess = createAction(\"contact/fetchСontactSuccess\");\r\nexport const fetchContactError = createAction(\"contact/fetchContactError\");\r\n\r\nexport const filterContact = createAction(\"filterContact\");\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const logger = (state) => state.contacts.logger;\r\n\r\nexport const filteredArrayContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const filterValue = filter.toLowerCase();\r\n    const filterText = (value) => value.toLowerCase().includes(filterValue);\r\n\r\n    return contacts.filter(({ name }) => filterText(name));\r\n  }\r\n);\r\n","import { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FormContact.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contact-operations\";\r\nimport { getContacts } from \"../../redux/contacts/contact-selectors\";\r\n\r\nclass FormContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n\r\n  addFormContact = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  dominicToretto = () => {\r\n    return this.props.contactsItems.find(({ name, number }) => {\r\n      return name === this.state.name || number === this.state.number;\r\n    });\r\n  };\r\n\r\n  SubmitForm = (e) => {\r\n    const { name, number } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    if (this.dominicToretto()) {\r\n      return alert(\"the same name or phone number already exists\");\r\n    }\r\n\r\n    this.props.addСontact({\r\n      name: name,\r\n      number: number,\r\n      id: uuidv4(),\r\n    });\r\n\r\n    this.setState({ name: \"\", number: \"\", id: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className={styles.transparent}\r\n        htmlFor={uuidv4()}\r\n        onSubmit={this.SubmitForm}\r\n      >\r\n        <div className={styles.formInner}>\r\n          <label>\r\n            Name\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className={styles.buttom} type=\"submit\">\r\n            aad contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nFormContact.propTypes = {\r\n  contactsItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\nFunction.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsItems: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addСontact: (value) => dispatch(actions.addСontact(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContact);\r\n","import {\r\n  addContactRequest,\r\n  addСontactSuccess,\r\n  aadContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchСontactSuccess,\r\n  fetchContactError,\r\n} from \"./contacts-actions\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const addСontact = (value) => async (dispatch) => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/users\", value);\r\n\r\n    dispatch(addСontactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(aadContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = (id) => async (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/users/${id}`);\r\n\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport const fetchContact = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/users\");\r\n\r\n    dispatch(fetchСontactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./ContactsFilter.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilter } from \"../../redux/contacts/contact-selectors\";\r\n\r\nconst ContactsFilter = ({ filterContactState, filter }) => {\r\n  return (\r\n    <input\r\n      className={styles.lable}\r\n      onChange={filterContactState}\r\n      value={filter}\r\n      tupe=\"text\"\r\n      name=\"filter\"\r\n      title=\"Поиск контактов\"\r\n    />\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  filterContactState: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  filterContactState: (e) =>\r\n    dispatch(actions.filterContact(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsFilter);\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport style from \"./ContactList.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contact-operations\";\r\nimport { Component } from \"react\";\r\nimport { filteredArrayContact } from \"../../redux/contacts/contact-selectors\";\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount = () => {\r\n    this.props.fetchContact();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul className={style.list}>\r\n        {this.props.filteredArrayContact.map(({ name, number, id }) => (\r\n          <li className={style.listItem} key={id}>\r\n            <p className={style.name}>\r\n              {name}: <span className={style.number}>{number}</span>\r\n            </p>\r\n            <button\r\n              className={style.button}\r\n              type=\"button\"\r\n              onClick={() => this.props.deleteContact(id)}\r\n            >\r\n              Удалить\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filteredArrayContact: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filteredArrayContact: filteredArrayContact(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n  fetchContact: () => dispatch(actions.fetchContact()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import \"./App.css\";\nimport FormContact from \"./component/FormContact\";\nimport ContactsFilter from \"./component/ContactsFilter\";\nimport ContactList from \"./component/ContactList\";\nimport { connect } from \"react-redux\";\nimport { logger } from \"./redux/contacts/contact-selectors\";\nimport styles from \"./App.module.scss\";\n\nconst App = ({ logger }) => {\n  return (\n    <div className={styles.box}>\n      <h1 className={styles.title}>Phonebook</h1>\n      <FormContact />\n      <div>\n        <h2 className={styles.title}>contacts</h2>\n        <ContactsFilter />\n        <ContactList />\n        {logger && <h1 className={styles.preloader}>Загрузк...</h1>}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  logger: logger(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport {\r\n  addContactRequest,\r\n  addСontactSuccess,\r\n  aadContactError,\r\n  filterContact,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchСontactSuccess,\r\n  fetchContactError,\r\n} from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchСontactSuccess]: (_, { payload }) => payload,\r\n  [addСontactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter((todo) => todo.id !== payload),\r\n});\r\n\r\nconst loggerReducer = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addСontactSuccess]: () => false,\r\n  [aadContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchСontactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  logger: loggerReducer,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"../redux/contacts/contacts-reducer\";\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\n// const contactsPersistConfig = {\r\n//   key: \"root\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const dulo = { store, persistor };\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}